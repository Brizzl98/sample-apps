# Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

search item {

    document item {

        field asin type string {
            indexing: summary | attribute
            summary-to: short
        }

        field timestamp type long {
            indexing: summary | attribute
        }

        field brand type string {
            indexing: summary | attribute | index
        }

        field title type string {
            indexing: summary | attribute | index
            summary-to: short
        }

        field description type string {
            indexing: summary | index
        }

        field price type float {
            indexing: summary | attribute
            summary-to: short
        }

        field categories type array<string> {
            indexing: summary | attribute | index
            summary-to: short
        }

        field images type array<string> {
            indexing: summary | attribute
            summary-to: short
        }

        field related type array<string> {
            indexing: summary
        }

        field rating_stars type int {
            indexing: summary | attribute
            summary-to: short
        }

        field rating_count type int {
            indexing: summary | attribute
            summary-to: short
        }

    }

    fieldset default {
        fields: brand, title, description, categories
    }

    rank-profile item inherits default {

        function inline average_rating() {
            expression: if(attribute(rating_count) > 0, attribute(rating_stars) / attribute(rating_count), 0)
        }

        function inline default_ranking() {
            expression: 3*nativeRank(categories) + 2*nativeRank(title) + 1*nativeRank(description) + 1*nativeRank(brand) + 1*if(attribute(rating_count) > 5, average_rating / 5, 0)
        }

        function inline rating_filter() {
            expression: if (query(use_rating_filter)==1, if(average_rating >= (query(rating)-0.5) && average_rating < (query(rating)+0.5), 1, 0), 1)
        }

        function apply_ranking_filters(val) {
            expression: val * rating_filter
        }

        first-phase {
            expression: apply_ranking_filters(default_ranking)
            rank-score-drop-limit: 0.0
        }

        summary-features {
            rankingExpression(average_rating)
        }

    }

    rank-profile promoted inherits item {
        first-phase {
            expression: (average_rating / 5) + random
        }
    }

    rank-profile sort_by_price inherits item {
        function inline default_ranking() {
            expression: 1000000000 + (query(sort_direction) * attribute(price))
        }
    }

    rank-profile sort_by_rating inherits item {
        function inline default_ranking() {
            expression: 1000000000 + (query(sort_direction) * average_rating)
        }
    }

}
